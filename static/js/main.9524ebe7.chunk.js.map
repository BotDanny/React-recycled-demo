{"version":3,"sources":["utils.tsx","TypeDef.tsx","AbstractList.tsx","FixedSizeList.tsx","VariableSizeList.tsx","ResponsiveContainer.tsx","FullWindowFixedList.tsx","pages/GeneralPage.tsx","pages/SimpleList.tsx","pages/SimpleGrid.tsx","pages/VariableRowHeight.tsx","pages/VariableColumn.tsx","pages/FullWindow.tsx","pages/VariableRowHeightColumn.tsx","pages/CustomWindow.tsx","pages/ResponsiveContainer.tsx","FullWindowResponsiveContainer.tsx","pages/FullWindowResponsiveContainer.tsx","pages/LazyLoadingAdvanced.tsx","pages/LazyLoadingSimple.tsx","pages/ReactWindowComparison.tsx","pages/DynamicLoading.tsx","pages/ScrollIndicator.tsx","pages/ScrollTo.tsx","SideNav.tsx","App.tsx","Root.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateRowPositions","rowHeights","prev","rowPositions","rowCount","length","i","mapRowIndexToDataIndex","rowColumns","totalNumOfData","prevEndDataIndex","map","newEndDataIndex","Math","min","classNames","className1","className2","validateScrollTo","result","undefined","Error","sortedLastIndex","array","target","start","end","mid","floor","sortedFirstIndex","noRowRenderInfo","firstRenderedRowIndex","firstRenderedDataIndex","lastRenderedRowIndex","lastRenderedDataIndex","lastRowIndex","noRowVisibilityInfo","firstVisibleRowIndex","firstVisibleDataIndex","lastVisibleRowIndex","lastVisibleDataIndex","General","props","prevScroll","prevLastVisibleRow","prevLastRenderedRow","listWindowRef","rowToDataIndexMap","totalNumOfRenderedRows","initialArrayTemplate","totalRows","fullHeight","timeOut","windowHeight","numOfInvisibleRowOnEachDirection","onListWillRecycle","newRenderedRowIndex","newScrollState","newTopRenderedRowRelativeIndex","useScrollingIndicator","onRenderedRowChange","setState","scrollState","_debounceScrollState","mod","topRowIndex","onScrollChange","scrollTop","onVisibleRowChange","getBottomViewportRowIndex","getTopViewportRowIndex","recycle","state","renderedRowIndex","topRenderedRowRelativeIndex","topScroll","rowsToRecycle","max","bottomRenderedRowIndex","viewportBottom","cycle","resetList","getResetViewportBottom","_","index","onScroll","event","currentTarget","scrollToDataIndex","targetIndex","targetRow","Object","values","findIndex","value","targetPosition","manualScroll","scrollToRow","scrollTo","current","n","m","clearTimeout","setTimeout","scrollInterval","initalScrollTop","this","prevProps","shouldResetList","initializeProperties","listTagName","listClassName","listWindowClassName","data","width","rowComponent","rowTagName","rowClassName","ListTag","RowComponent","className","style","height","overflowY","ref","position","absoluteRowIndex","dataIndexInfo","startDataIndex","endDataIndex","top","boxSizing","dataIndex","dataEndIndex","row","column","isScrolling","React","PureComponent","FixedList","rowHeight","additionalRenderedRow","reduce","acc","calculatedRowColumns","Array","ceil","fill","numOfVisibleRow","currentProp","viewportBottomRow","Number","isInteger","createRef","initialRenderedRowIndex","initialScrollState","GeneralList","VariableList","ResponsiveContainer","render","debounceResize","debounceInterval","serverSideHeight","useResizeDetector","refreshMode","refreshRate","useState","hasMounted","setHasMounted","useEffect","FullWindowFixedList","initialScrolling","fullListRef","scrollListener","constructor","serverWindowHeight","scrollRef","rootMarginTop","rootMarginBottom","calculatedWindowHeight","parseInt","window","getComputedStyle","innerHeight","attachScrollListener","removeEventListener","addEventListener","getScrollTop","recycledList","scrollY","distanceBetweenScrollContainerAndWindow","getBoundingClientRect","distanceToWindowTopFromTopOfList","customElement","distanceToElementTopFromTopOfList","resetListAndRef","setCustomScrollRef","console","log","RowTag","GeneralPage","code","Demo","language","randInt","random","SimpleListDemo","Row","memo","SimpleGridDemo","rowData","slice","columnStyle","textAlign","display","alignItems","item","VariableRowHeightDemo","VariableColumnDemo","columnsInEachRow","totalNumberOfItems","1","2","3","4","FullWindowDemo","VariableRowHeightColumnDemo","dataLength","heights","columns","nextDataIndex","tempNextDataIndex","generateRamdomRowHeightAndColumn","CustomWindowDemo","useRef","listRef","setComponentHasMounted","fillerStyle","padding","ResponsiveContainerDemo","resize","overflow","sizeInfo","FullWindowResponsiveContainer","scrollContainerRef","targetRef","FullWindowResponsiveContainerDemo","fetchData","page","onSuccess","push","initialStore","nextPage","isLoading","LazyLoadingDemo","store","setStore","onFetchDataSuccess","newData","newStoreData","listData","flat","renderInfo","displayValue","setData","setIsLoading","startIndex","endIndex","ReactWindow","itemSize","itemCount","ReactWindowRow","initialPagedData","hasLoaded","populateInitialPage","getPageFromDataIndex","DynamicLoadingDemo","pagedData","setPagedData","dataList","useMemo","currentTopPage","currentBottomPage","currentPages","pop","forEach","ScrollIndicatorDemo","ScrollToDemo","justifyContent","Button","variant","color","textTransform","onClick","SideNav","pathname","useLocation","Drawer","anchor","Typography","Divider","List","ListItem","ListItemText","primary","button","component","Link","to","examples","label","route","selected","components","Root","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9524ebe7.chunk.js","sourcesContent":["export function calculateRowPositions(rowHeights: number[]) {\n  let prev = 0;\n  const rowPositions: number[] = [];\n  const rowCount = rowHeights.length;\n  for (let i = 0; i < rowCount; i++) {\n    if (i === 0) rowPositions[i] = 0;\n    else rowPositions[i] = prev;\n    prev += rowHeights[i];\n  }\n  return rowPositions;\n}\n\nexport type RowToDataIndexMap = { [key: string]: [number, number] };\nexport function mapRowIndexToDataIndex(\n  rowColumns: number[],\n  totalNumOfData: number\n) {\n  const rowCount = rowColumns.length;\n  let prevEndDataIndex = 0;\n  let map: RowToDataIndexMap = {};\n  for (let i = 0; i < rowCount; i++) {\n    const newEndDataIndex = Math.min(\n      prevEndDataIndex + rowColumns[i],\n      totalNumOfData\n    );\n    map[i] = [prevEndDataIndex, newEndDataIndex];\n    prevEndDataIndex = newEndDataIndex;\n  }\n  return map;\n}\n\nexport function classNames(className1: string, className2: string | undefined) {\n  if (className2) return `${className1} ${className2}`;\n  else return className1;\n}\n\nexport function validateScrollTo(result: any) {\n  if (result === -1 || result === undefined) {\n    throw Error(\n      \"Invalid input to ScrollTo, make sure your input data index or row is correct\"\n    );\n  }\n}\n\nexport function sortedLastIndex(array: number[], target: number) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (array[mid] <= target) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return start;\n}\n\nexport function sortedFirstIndex(array: number[], target: number) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (array[mid] < target) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return start;\n}\n\n","export interface RowProps {\n  data: any[];\n  row: number;\n  dataIndex: number;\n  dataEndIndex: number;\n  column: number;\n  isScrolling: boolean;\n  style?: any;\n  index?: any;\n}\n\nexport interface ReactRecycledListProps {\n  width?: string | number;\n  data: any[];\n  rowHeight: number;\n  rowComponent: React.ElementType<RowProps>;\n  initalScrollTop?: number;\n  column?: number;\n  rowColumns?: number[];\n  additionalRenderedRow?: number;\n  listWindowClassName?: string;\n  listClassName?: string;\n  listTagName?: string;\n  rowTagName?: string;\n  rowClassName?: string;\n  useScrollingIndicator?: boolean;\n  scrollInterval?: number;\n  onRenderedRowChange?: onRenderedRowChangeCallBack;\n  onVisibleRowChange?: onVisibleRowChangeCallBack;\n}\n\nexport interface RenderInfo {\n  firstRenderedRowIndex: number;\n  firstRenderedDataIndex: number;\n  lastRenderedRowIndex: number;\n  lastRenderedDataIndex: number;\n  lastRowIndex: number;\n}\n\nexport interface VisibilityInfo {\n  firstVisibleRowIndex: number;\n  firstVisibleDataIndex: number;\n  lastVisibleRowIndex: number;\n  lastVisibleDataIndex: number;\n  lastRowIndex: number;\n}\n\nexport type onRenderedRowChangeCallBack = (renderInfo: RenderInfo) => void;\n\nexport type onVisibleRowChangeCallBack = (renderInfo: VisibilityInfo) => void;\n\nexport interface ReactRecycledListState {\n  renderedRowIndex: number[];\n  topRenderedRowRelativeIndex: number;\n  scrollState: boolean[];\n}\n\nexport const noRowRenderInfo: RenderInfo = {\n  firstRenderedRowIndex: -1,\n  firstRenderedDataIndex: -1,\n  lastRenderedRowIndex: -1,\n  lastRenderedDataIndex: -1,\n  lastRowIndex: -1,\n}\n\nexport const noRowVisibilityInfo: VisibilityInfo = {\n  firstVisibleRowIndex: -1,\n  firstVisibleDataIndex: -1,\n  lastVisibleRowIndex: -1,\n  lastVisibleDataIndex: -1,\n  lastRowIndex: -1,\n}","import { withStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport {\n  noRowRenderInfo,\n  noRowVisibilityInfo,\n  ReactRecycledListProps,\n  ReactRecycledListState,\n  RowProps,\n} from \"./TypeDef\";\nimport { RowToDataIndexMap, validateScrollTo, classNames } from \"./utils\";\n\nexport default abstract class General<\n  P extends ReactRecycledListProps,\n  S extends ReactRecycledListState\n> extends React.PureComponent<P, S> {\n  prevScroll: number;\n  prevLastVisibleRow: number;\n  prevLastRenderedRow: number;\n  abstract listWindowRef: any;\n  abstract rowHeights: number[];\n  abstract rowPositions: number[];\n  abstract rowToDataIndexMap: RowToDataIndexMap;\n  abstract totalNumOfRenderedRows: number;\n  abstract initialArrayTemplate: null[];\n  abstract totalRows: number;\n  abstract fullHeight: number;\n  abstract timeOut: any;\n  abstract windowHeight: number;\n  abstract numOfInvisibleRowOnEachDirection: number;\n  abstract getTopViewportRowIndex(scrollTop: number): number;\n  abstract getBottomViewportRowIndex(scrollTop: number): number;\n  abstract shouldResetList(prevProps: P): boolean;\n  abstract initializeProperties(): any;\n\n  constructor(props: P) {\n    super(props);\n    this.prevScroll = 0;\n    this.prevLastVisibleRow = -1;\n    this.prevLastRenderedRow = -1;\n  }\n\n  componentDidMount() {\n    const { initalScrollTop } = this.props;\n    if (initalScrollTop) {\n      this.manualScroll(initalScrollTop as number);\n    }\n  }\n\n  componentDidUpdate(prevProps: P) {\n    if (this.shouldResetList(prevProps)) {\n      const {\n        rowToDataIndexMap,\n        rowPositions,\n        totalRows,\n        initialArrayTemplate,\n        fullHeight,\n        totalNumOfRenderedRows,\n        numOfInvisibleRowOnEachDirection,\n        windowHeight,\n        rowHeights,\n      } = this.initializeProperties();\n\n      this.rowToDataIndexMap = rowToDataIndexMap;\n      this.rowPositions = rowPositions;\n      this.totalRows = totalRows;\n      this.initialArrayTemplate = initialArrayTemplate;\n      this.fullHeight = fullHeight;\n      this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n      this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n      this.rowHeights = rowHeights;\n      this.windowHeight = windowHeight;\n      this.resetList();\n    }\n  }\n\n  onListWillRecycle = (\n    newRenderedRowIndex: number[],\n    newScrollState: boolean[],\n    newTopRenderedRowRelativeIndex: number\n  ) => {\n    const { useScrollingIndicator, onRenderedRowChange } = this.props;\n    if (useScrollingIndicator) {\n      this.setState({\n        scrollState: newScrollState,\n      });\n      this._debounceScrollState();\n    }\n\n    if (onRenderedRowChange) {\n      if (this.totalNumOfRenderedRows === 0) {\n        onRenderedRowChange(noRowRenderInfo);\n        return;\n      }\n\n      const lastRenderedRowIndex =\n        newRenderedRowIndex[this.mod(newTopRenderedRowRelativeIndex - 1)];\n      if (lastRenderedRowIndex === this.prevLastRenderedRow) return;\n      const topRowIndex = newRenderedRowIndex[newTopRenderedRowRelativeIndex];\n      onRenderedRowChange({\n        firstRenderedRowIndex: topRowIndex,\n        firstRenderedDataIndex: this.rowToDataIndexMap[topRowIndex][0],\n        lastRenderedRowIndex: lastRenderedRowIndex,\n        lastRenderedDataIndex:\n          this.rowToDataIndexMap[lastRenderedRowIndex][1] - 1,\n        lastRowIndex: this.totalRows - 1,\n      });\n      this.prevLastRenderedRow = lastRenderedRowIndex;\n    }\n  };\n\n  onScrollChange = (scrollTop: number) => {\n    const { onVisibleRowChange } = this.props;\n    if (!onVisibleRowChange) return;\n\n    if (this.totalNumOfRenderedRows === 0) {\n      onVisibleRowChange(noRowVisibilityInfo);\n      this.prevLastVisibleRow = -1;\n      return;\n    }\n\n    let lastVisibleRowIndex = this.getBottomViewportRowIndex(\n      scrollTop + this.windowHeight //view port bottom position\n    );\n\n    if (this.fullHeight < this.windowHeight) {\n      lastVisibleRowIndex = this.getBottomViewportRowIndex(\n        scrollTop + this.fullHeight //view port bottom position\n      );\n    }\n\n    if (lastVisibleRowIndex === this.prevLastVisibleRow) return;\n    const firstVisibleRowIndex = this.getTopViewportRowIndex(scrollTop);\n    const firstVisibleDataIndex = this.rowToDataIndexMap[\n      firstVisibleRowIndex\n    ][0];\n\n    const lastVisibleDataIndex =\n      this.rowToDataIndexMap[lastVisibleRowIndex][1] - 1;\n    onVisibleRowChange({\n      firstVisibleRowIndex,\n      firstVisibleDataIndex,\n      lastVisibleRowIndex,\n      lastVisibleDataIndex,\n      lastRowIndex: this.totalRows - 1,\n    });\n    this.prevLastVisibleRow = lastVisibleRowIndex;\n  };\n\n  recycle = (scrollTop: number) => {\n    const {\n      renderedRowIndex,\n      topRenderedRowRelativeIndex,\n      scrollState,\n    } = this.state;\n    const topScroll = scrollTop - this.prevScroll > 0 ? false : true;\n    this.prevScroll = scrollTop;\n\n    this.onScrollChange(scrollTop);\n\n    let rowsToRecycle = 0;\n    if (topScroll) {\n      const topRenderedRowIndex = renderedRowIndex[topRenderedRowRelativeIndex];\n      const newTopRenderedRowIndex = Math.max(\n        this.getTopViewportRowIndex(scrollTop) -\n          this.numOfInvisibleRowOnEachDirection,\n        0\n      );\n      rowsToRecycle = topRenderedRowIndex - newTopRenderedRowIndex;\n    } else {\n      const bottomRenderedRowIndex =\n        renderedRowIndex[this.mod(topRenderedRowRelativeIndex - 1)];\n      const viewportBottom = scrollTop + this.windowHeight;\n      const newBottomRenderedRowIndex = Math.min(\n        this.getBottomViewportRowIndex(viewportBottom) +\n          this.numOfInvisibleRowOnEachDirection,\n        this.totalRows - 1\n      );\n\n      rowsToRecycle = newBottomRenderedRowIndex - bottomRenderedRowIndex;\n    }\n\n    if (rowsToRecycle > 0) {\n      const newRenderedRowIndex = [...renderedRowIndex];\n      const newScrollState = [...scrollState];\n      let cycle = 0;\n      while (cycle < rowsToRecycle) {\n        const newTopRenderedRowRelativeIndex = this.mod(\n          topRenderedRowRelativeIndex + (topScroll ? -cycle - 1 : cycle)\n        );\n\n        newRenderedRowIndex[newTopRenderedRowRelativeIndex] += topScroll\n          ? -this.totalNumOfRenderedRows\n          : this.totalNumOfRenderedRows;\n\n        newScrollState[newTopRenderedRowRelativeIndex] = true;\n\n        cycle++;\n      }\n\n      const newTopRenderedRowRelativeIndex = this.mod(\n        topRenderedRowRelativeIndex +\n          (topScroll ? -rowsToRecycle : rowsToRecycle)\n      );\n\n      this.onListWillRecycle(\n        newRenderedRowIndex,\n        newScrollState,\n        newTopRenderedRowRelativeIndex\n      );\n\n      this.setState({\n        renderedRowIndex: newRenderedRowIndex,\n        topRenderedRowRelativeIndex: newTopRenderedRowRelativeIndex,\n      });\n    }\n  };\n\n  resetList = () => {\n    const bottomRenderedRowIndex = this.totalNumOfRenderedRows - 1;\n    const viewportBottom = this.getResetViewportBottom();\n    const newBottomRenderedRowIndex = Math.min(\n      this.getBottomViewportRowIndex(viewportBottom) +\n        this.numOfInvisibleRowOnEachDirection,\n      this.totalRows - 1\n    );\n\n    const rowsToRecycle = newBottomRenderedRowIndex - bottomRenderedRowIndex;\n\n    let newRenderedRowIndex = this.initialArrayTemplate.map(\n      (_, index) => index\n    );\n    let newScrollState = this.initialArrayTemplate.map(() => false);\n    let newTopRenderedRowRelativeIndex = 0;\n\n    if (rowsToRecycle > 0) {\n      let cycle = 0;\n      while (cycle < rowsToRecycle) {\n        const newTopRenderedRowRelativeIndex = this.mod(cycle);\n        newRenderedRowIndex[\n          newTopRenderedRowRelativeIndex\n        ] += this.totalNumOfRenderedRows;\n        newScrollState[newTopRenderedRowRelativeIndex] = true;\n        cycle++;\n      }\n      newTopRenderedRowRelativeIndex = this.mod(rowsToRecycle);\n    }\n\n    this.onListWillRecycle(\n      newRenderedRowIndex,\n      newScrollState,\n      newTopRenderedRowRelativeIndex\n    );\n    this.onScrollChange(this.prevScroll);\n    this.setState({\n      renderedRowIndex: newRenderedRowIndex,\n      topRenderedRowRelativeIndex: newTopRenderedRowRelativeIndex,\n    });\n  };\n\n  onScroll = (event: React.UIEvent<HTMLElement>) => {\n    this.recycle(event.currentTarget.scrollTop);\n  };\n\n  scrollToDataIndex = (targetIndex: number) => {\n    const targetRow = Object.values(this.rowToDataIndexMap).findIndex(\n      (value) => targetIndex >= value[0] && targetIndex < value[1]\n    );\n    validateScrollTo(targetRow);\n    const targetPosition = this.rowPositions[targetRow];\n    this.manualScroll(targetPosition);\n  };\n\n  scrollToRow = (targetRow: number) => {\n    const targetPosition = this.rowPositions[targetRow];\n    validateScrollTo(targetPosition);\n    this.manualScroll(targetPosition);\n  };\n\n  scrollTo = (scrollTop: number) => {\n    this.manualScroll(scrollTop);\n  };\n\n  manualScroll = (targetPosition: number) => {\n    if (this.listWindowRef.current) {\n      this.listWindowRef.current.scrollTop = targetPosition;\n    }\n  };\n\n  mod = (n: number, m: number = this.totalNumOfRenderedRows) => {\n    return ((n % m) + m) % m;\n  };\n\n  getResetViewportBottom = () => {\n    return this.prevScroll + this.windowHeight;\n  };\n\n  _debounceScrollState = () => {\n    clearTimeout(this.timeOut);\n    this.timeOut = setTimeout(() => {\n      this.setState({\n        scrollState: this.initialArrayTemplate.map(() => false),\n      });\n    }, this.props.scrollInterval || 250);\n  };\n\n  render() {\n    const {\n      listTagName,\n      listClassName,\n      listWindowClassName,\n      data,\n      width,\n      rowComponent,\n      rowTagName,\n      rowClassName,\n    } = this.props;\n    const { renderedRowIndex, scrollState } = this.state;\n\n    const ListTag: any = listTagName || \"div\";\n    const RowTag: any = rowTagName || \"div\";\n    const RowComponent: React.ElementType<RowProps> = rowComponent;\n    return (\n      <div\n        className={classNames(\n          \"react-recycled-list-window\",\n          listWindowClassName\n        )}\n        style={{\n          height: this.windowHeight,\n          overflowY: \"auto\",\n          width: width || \"100%\",\n        }}\n        onScroll={this.onScroll}\n        ref={this.listWindowRef}\n      >\n        <ListTag\n          className={classNames(\"react-recycled-list\", listClassName)}\n          style={{\n            height: this.fullHeight,\n            position: \"relative\",\n          }}\n        >\n          {renderedRowIndex.map((absoluteRowIndex, index) => {\n            const dataIndexInfo = this.rowToDataIndexMap[absoluteRowIndex];\n            const startDataIndex = dataIndexInfo[0];\n            const endDataIndex = dataIndexInfo[1];\n            const style: any = {\n              position: \"absolute\",\n              top: this.rowPositions[absoluteRowIndex],\n              height: this.rowHeights[absoluteRowIndex],\n              width: \"100%\",\n              boxSizing: \"border-box\",\n            };\n            return (\n              <RowComponent\n                key={index}\n                data={data}\n                dataIndex={startDataIndex}\n                dataEndIndex={endDataIndex}\n                row={absoluteRowIndex}\n                column={endDataIndex - startDataIndex}\n                isScrolling={scrollState[index]}\n                style={style}\n              />\n            );\n          })}\n        </ListTag>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  RowToDataIndexMap,\n  calculateRowPositions,\n  mapRowIndexToDataIndex,\n} from \"./utils\";\nimport { ReactRecycledListProps, ReactRecycledListState } from \"./TypeDef\";\nimport GeneralList from \"./AbstractList\";\n\ninterface FixedListProps extends ReactRecycledListProps {\n  height: number;\n}\n\nexport default class FixedList extends GeneralList<\n  FixedListProps,\n  ReactRecycledListState\n> {\n  rowPositions: number[];\n  rowHeights: number[];\n  rowToDataIndexMap: RowToDataIndexMap;\n  fullHeight: number;\n  windowHeight: number;\n  initialArrayTemplate: null[];\n  totalNumOfRenderedRows: number;\n  numOfInvisibleRowOnEachDirection: number;\n  totalRows: number;\n  timeOut: any;\n  listWindowRef: React.RefObject<HTMLDivElement>;\n\n  initializeProperties = () => {\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      data,\n      height,\n      additionalRenderedRow,\n    } = this.props;\n\n    // Validate\n\n    if (rowColumns) {\n      if (\n        rowColumns.reduce((acc, current) => acc + current, 0) !== data.length\n      ) {\n        throw Error(\n          \"The total number of data item calculated from rowColumns does not match the length of your input data\"\n        );\n      }\n    }\n\n    const calculatedRowColumns = rowColumns\n      ? rowColumns\n      : column\n      ? Array(Math.ceil(data.length / column)).fill(column)\n      : Array(data.length).fill(1);\n    const rowHeights = calculatedRowColumns.map(() => rowHeight);\n\n    const rowToDataIndexMap = mapRowIndexToDataIndex(\n      calculatedRowColumns,\n      data.length\n    );\n    const rowPositions = calculateRowPositions(rowHeights);\n    const totalRows = rowHeights.length;\n\n    const numOfVisibleRow = Math.ceil(height / rowHeight);\n    const numOfInvisibleRowOnEachDirection =\n      additionalRenderedRow || Math.floor(numOfVisibleRow / 2);\n    let totalNumOfRenderedRows =\n      numOfVisibleRow + numOfInvisibleRowOnEachDirection * 2;\n    if (totalNumOfRenderedRows > totalRows) totalNumOfRenderedRows = totalRows;\n    const initialArrayTemplate = Array(totalNumOfRenderedRows).fill(null);\n\n    const fullHeight = rowHeights.reduce((acc, current) => acc + current, 0);\n    const windowHeight = height;\n\n    return {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n    };\n  };\n\n  constructor(props: FixedListProps) {\n    super(props);\n\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n    } = this.initializeProperties();\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    this.listWindowRef = React.createRef();\n\n    const initialRenderedRowIndex = this.initialArrayTemplate.map(\n      (_, index) => index\n    );\n    const initialScrollState = this.initialArrayTemplate.map(() => false);\n\n    this.onListWillRecycle(initialRenderedRowIndex, initialScrollState, 0);\n    this.onScrollChange(0);\n\n    this.state = {\n      renderedRowIndex: initialRenderedRowIndex,\n      scrollState: initialScrollState,\n      topRenderedRowRelativeIndex: 0,\n    };\n  }\n\n  shouldResetList = (prevProps: FixedListProps) => {\n    const currentProp = this.props;\n    if (prevProps === currentProp) return false;\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      height,\n      data,\n      additionalRenderedRow,\n    } = currentProp;\n\n    return (\n      prevProps.rowHeight !== rowHeight ||\n      prevProps.column !== column ||\n      prevProps.rowColumns !== rowColumns ||\n      prevProps.height !== height ||\n      prevProps.data !== data ||\n      prevProps.additionalRenderedRow !== additionalRenderedRow\n    );\n  };\n\n  getTopViewportRowIndex = (scrollTop: number) => {\n    return Math.floor(scrollTop / this.props.rowHeight);\n  };\n\n  getBottomViewportRowIndex = (viewportBottom: number) => {\n    let viewportBottomRow = viewportBottom / this.props.rowHeight;\n    if (Number.isInteger(viewportBottomRow)) viewportBottomRow -= 1;\n    else viewportBottomRow = Math.floor(viewportBottomRow);\n    return viewportBottomRow;\n  };\n}\n","import React from \"react\";\nimport {\n  RowToDataIndexMap,\n  calculateRowPositions,\n  mapRowIndexToDataIndex,\n} from \"./utils\";\nimport { ReactRecycledListProps, ReactRecycledListState } from \"./TypeDef\";\nimport { sortedLastIndex, sortedFirstIndex } from \"./utils\";\nimport GeneralList from \"./AbstractList\";\n\ninterface VariableListProps extends ReactRecycledListProps {\n  rowHeights: number[];\n  height: number;\n}\n\nexport default class VariableList extends GeneralList<\n  VariableListProps,\n  ReactRecycledListState\n> {\n  rowPositions: number[];\n  rowHeights: number[];\n  rowToDataIndexMap: RowToDataIndexMap;\n  fullHeight: number;\n  windowHeight: number;\n  initialArrayTemplate: null[];\n  totalNumOfRenderedRows: number;\n  numOfInvisibleRowOnEachDirection: number;\n  totalRows: number;\n  timeOut: any;\n  listWindowRef: React.RefObject<HTMLDivElement>;\n\n  initializeProperties = () => {\n    const {\n      rowHeight,\n      rowHeights,\n      column,\n      rowColumns,\n      data,\n      height,\n      additionalRenderedRow,\n    } = this.props;\n\n    // Validate\n\n    if (rowColumns) {\n      if (\n        rowColumns.reduce((acc, current) => acc + current, 0) !== data.length\n      ) {\n        throw Error(\n          \"The total number of data item calculated from rowColumns does not match the length of your input data\"\n        );\n      }\n      if (rowColumns.length !== rowHeights.length) {\n        throw Error(\n          \"The number of rows provided from rowHeights does not match the number of rows provided from rowColumns\"\n        );\n      }\n    } else if (column) {\n      const rows = Math.ceil(data.length / column);\n      if (rows !== rowHeights.length) {\n        throw Error(\n          \"The number of rows provided from rowHeights does not match the number of rows calculated from column\"\n        );\n      }\n    } else if (rowHeights.length !== data.length) {\n      throw Error(\n        \"The number of rows provided from rowHeights does not match the number of rows calculated from your input data\"\n      );\n    }\n\n    const calculatedRowColumns = rowColumns\n      ? rowColumns\n      : column\n      ? Array(rowHeights.length).fill(column)\n      : Array(rowHeights.length).fill(1);\n\n    const rowToDataIndexMap = mapRowIndexToDataIndex(\n      calculatedRowColumns,\n      data.length\n    );\n    const rowPositions = calculateRowPositions(rowHeights);\n    const totalRows = rowHeights.length;\n\n    const numOfVisibleRow = Math.ceil(height / rowHeight);\n    const numOfInvisibleRowOnEachDirection =\n      additionalRenderedRow || 1;\n    let totalNumOfRenderedRows =\n      numOfVisibleRow + numOfInvisibleRowOnEachDirection * 2;\n    if (totalNumOfRenderedRows > totalRows) totalNumOfRenderedRows = totalRows;\n    const initialArrayTemplate = Array(totalNumOfRenderedRows).fill(null);\n\n    const fullHeight = rowHeights.reduce((acc, current) => acc + current, 0);\n    const windowHeight = height;\n\n    return {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n    };\n  };\n\n  constructor(props: VariableListProps) {\n    super(props);\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n    } = this.initializeProperties();\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    this.listWindowRef = React.createRef();\n\n    const initialRenderedRowIndex = this.initialArrayTemplate.map(\n      (_, index) => index\n    );\n    const initialScrollState = this.initialArrayTemplate.map(() => false);\n\n    this.onListWillRecycle(initialRenderedRowIndex, initialScrollState, 0);\n    this.onScrollChange(0);\n\n    this.state = {\n      renderedRowIndex: initialRenderedRowIndex,\n      scrollState: initialScrollState,\n      topRenderedRowRelativeIndex: 0,\n    };\n  }\n\n  shouldResetList = (prevProps: VariableListProps) => {\n    const currentProp = this.props;\n    if (prevProps === currentProp) return false;\n    const {\n      rowHeight,\n      rowHeights,\n      column,\n      rowColumns,\n      height,\n      data,\n      additionalRenderedRow,\n    } = currentProp;\n\n    return (\n      prevProps.rowHeight !== rowHeight ||\n      prevProps.rowHeights !== rowHeights ||\n      prevProps.column !== column ||\n      prevProps.rowColumns !== rowColumns ||\n      prevProps.height !== height ||\n      prevProps.data !== data ||\n      prevProps.additionalRenderedRow !== additionalRenderedRow\n    );\n  };\n\n  getTopViewportRowIndex = (scrollTop: number) => {\n    return sortedLastIndex(this.rowPositions, scrollTop) - 1;\n  };\n\n  getBottomViewportRowIndex = (viewportBottom: number) => {\n    return sortedFirstIndex(this.rowPositions, viewportBottom) - 1;\n  };\n}\n","import React from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport { classNames } from \"./utils\";\nexport interface ResponsiveContainerProps {\n  render: (sizeInfo: { width: number; height: number }) => React.ReactNode;\n  className?: string;\n  debounceResize?: boolean;\n  debounceInterval?: number;\n  serverSideHeight?: number;\n}\n\nexport default function ResponsiveContainer(props: ResponsiveContainerProps) {\n  const {\n    render,\n    className,\n    debounceResize,\n    debounceInterval,\n    serverSideHeight,\n  } = props;\n  const { width, height, ref } = useResizeDetector({\n    refreshMode: debounceResize ? \"debounce\" : undefined,\n    refreshRate: debounceInterval ? debounceInterval : 100,\n  });\n  const [hasMounted, setHasMounted] = React.useState(false);\n  React.useEffect(() => {\n    if (serverSideHeight !== undefined) {\n      setHasMounted(true);\n    }\n  });\n  return (\n    <div\n      className={classNames(\"react-recycled-responsive-container\", className)}\n      ref={ref as React.RefObject<HTMLDivElement>}\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n      }}\n    >\n      {render({\n        width: width || 0,\n        height: height || (!hasMounted && serverSideHeight) || 0,\n      })}\n    </div>\n  );\n}","import { calculateRowPositions, mapRowIndexToDataIndex } from \"./utils\";\nimport { ReactRecycledListProps, ReactRecycledListState } from \"./TypeDef\";\nimport GeneralList from \"./AbstractList\";\nimport {\n  RowToDataIndexMap,\n  classNames,\n  sortedFirstIndex,\n  sortedLastIndex,\n} from \"./utils\";\nimport { RowProps } from \"./TypeDef\";\nimport React from \"react\";\n\nexport interface FullWindowFixedListProps extends ReactRecycledListProps {\n  rootMarginTop?: number;\n  rootMarginBottom?: number;\n  windowHeight?: number;\n  serverWindowHeight?: number;\n  scrollRef?: React.MutableRefObject<HTMLElement | undefined | null>;\n}\n\nexport default class FullWindowFixedList<\n  P extends FullWindowFixedListProps,\n  S extends ReactRecycledListState\n> extends GeneralList<P, S> {\n  rowPositions: number[];\n  rowHeights: number[];\n  rowToDataIndexMap: RowToDataIndexMap;\n  fullHeight: number;\n  windowHeight: number;\n  initialArrayTemplate: null[];\n  totalNumOfRenderedRows: number;\n  numOfInvisibleRowOnEachDirection: number;\n  totalRows: number;\n  timeOut: any;\n  initialScrolling: boolean;\n  fullListRef: React.RefObject<HTMLElement>;\n  scrollListener: HTMLElement | (Window & typeof globalThis) | undefined;\n  listWindowRef: any;\n\n  initializeProperties: (constructor?: boolean) => any = (\n    constructor: boolean = false\n  ) => {\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      data,\n      additionalRenderedRow,\n      serverWindowHeight,\n      scrollRef,\n      rootMarginTop = 0,\n      rootMarginBottom = 0,\n    } = this.props as P;\n\n    // Validate\n\n    if (rowColumns) {\n      if (\n        rowColumns.reduce((acc, current) => acc + current, 0) !== data.length\n      ) {\n        throw Error(\n          \"The total number of data item calculated from rowColumns does not match the length of your input data\"\n        );\n      }\n    } // no need to consider padding because when you scroll down padding doesn't apply\n\n    let calculatedWindowHeight = 0;\n    let scrollListener;\n\n    if (constructor && serverWindowHeight !== undefined) {\n      calculatedWindowHeight = serverWindowHeight;\n    } else if (\"scrollRef\" in this.props) {\n      if (scrollRef?.current) {\n        calculatedWindowHeight = parseInt(\n          window.getComputedStyle(scrollRef.current).height\n        );\n        scrollListener = scrollRef.current;\n      } else calculatedWindowHeight = 0;\n    } else {\n      calculatedWindowHeight = window.innerHeight;\n      scrollListener = window;\n    }\n\n    calculatedWindowHeight = Math.max(\n      0,\n      calculatedWindowHeight - rootMarginTop - rootMarginBottom\n    );\n\n    const calculatedRowColumns = rowColumns\n      ? rowColumns\n      : column\n      ? Array(Math.ceil(data.length / column)).fill(column)\n      : Array(data.length).fill(1);\n    const rowHeights = calculatedRowColumns.map(() => rowHeight);\n\n    const rowToDataIndexMap = mapRowIndexToDataIndex(\n      calculatedRowColumns,\n      data.length\n    );\n    const rowPositions = calculateRowPositions(rowHeights);\n    const totalRows = rowHeights.length;\n\n    const numOfVisibleRow = Math.ceil(calculatedWindowHeight / rowHeight);\n    const numOfInvisibleRowOnEachDirection =\n      additionalRenderedRow || numOfVisibleRow ? 1 : 0;\n    let totalNumOfRenderedRows =\n      numOfVisibleRow + numOfInvisibleRowOnEachDirection * 2;\n    if (totalNumOfRenderedRows > totalRows) totalNumOfRenderedRows = totalRows;\n    const initialArrayTemplate = Array(totalNumOfRenderedRows).fill(null);\n\n    const fullHeight = rowHeights.reduce((acc, current) => acc + current, 0);\n\n    return {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight: calculatedWindowHeight,\n      scrollListener,\n    };\n  };\n\n  constructor(props: P) {\n    super(props);\n\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n      scrollListener,\n    } = this.initializeProperties(true);\n\n    this.fullListRef = React.createRef();\n    this.listWindowRef = null;\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    this.scrollListener = scrollListener;\n    this.initialScrolling = false;\n\n    // Need to triger callback for onrenderedrowchange\n\n    this.state = {\n      renderedRowIndex: this.initialArrayTemplate.map((_, index) => index),\n      scrollState: this.initialArrayTemplate.map(() => false),\n      topRenderedRowRelativeIndex: 0,\n    } as S;\n  }\n\n  componentDidMount() {\n    this.attachScrollListener();\n    const { initalScrollTop } = this.props;\n    if (initalScrollTop) {\n      this.manualScroll(initalScrollTop as number);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.scrollListener) {\n      this.scrollListener.removeEventListener(\"scroll\", this.onScroll);\n    }\n  }\n\n  attachScrollListener = () => {\n    if (this.scrollListener) {\n      this.scrollListener.removeEventListener(\"scroll\", this.onScroll);\n      this.scrollListener.addEventListener(\"scroll\", this.onScroll);\n      // this.onListWillRecycle(\n      //   this.state.renderedRowIndex,\n      //   this.state.scrollState,\n      //   this.state.topRenderedRowRelativeIndex\n      // );\n      // this.onScrollChange(this.prevScroll);\n    }\n  };\n\n  getScrollTop = () => {\n    const { rootMarginTop = 0 } = this.props;\n    const recycledList = this.fullListRef.current as HTMLElement;\n    if (!recycledList) return window.scrollY;\n    const distanceBetweenScrollContainerAndWindow =\n      this.scrollListener === window\n        ? 0\n        : (this.scrollListener as HTMLElement).getBoundingClientRect().top;\n\n    return -(\n      recycledList.getBoundingClientRect().top -\n      distanceBetweenScrollContainerAndWindow -\n      rootMarginTop\n    );\n  };\n\n  onScroll = () => {\n    if (this.fullListRef) {\n      const scrollTop = this.getScrollTop();\n      this.recycle(scrollTop);\n    }\n  };\n\n  manualScroll = (targetPosition: number) => {\n    const { rootMarginTop = 0 } = this.props;\n    if (this.scrollListener) {\n      const recycledList = this.fullListRef.current as HTMLElement;\n      if (this.scrollListener === window) {\n        const distanceToWindowTopFromTopOfList =\n          recycledList.getBoundingClientRect().top + window.scrollY;\n        window.scrollTo({\n          top:\n            distanceToWindowTopFromTopOfList + targetPosition - rootMarginTop,\n        });\n      } else {\n        const customElement = this.scrollListener as HTMLElement;\n        const distanceToElementTopFromTopOfList =\n          recycledList.getBoundingClientRect().top -\n          customElement.getBoundingClientRect().top;\n        customElement.scrollTop =\n          distanceToElementTopFromTopOfList + targetPosition - rootMarginTop;\n      }\n    }\n  };\n\n  shouldResetList = (prevProps: P) => {\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      windowHeight,\n      data,\n      additionalRenderedRow,\n      scrollRef,\n      rootMarginBottom,\n      rootMarginTop,\n    } = this.props;\n\n    return (\n      prevProps.data !== data ||\n      prevProps.windowHeight !== windowHeight ||\n      (scrollRef && scrollRef.current !== this.scrollListener) ||\n      prevProps.rowHeight !== rowHeight ||\n      prevProps.column !== column ||\n      prevProps.rowColumns !== rowColumns ||\n      prevProps.additionalRenderedRow !== additionalRenderedRow ||\n      prevProps.rootMarginBottom !== rootMarginBottom ||\n      prevProps.rootMarginTop !== rootMarginTop\n    );\n  };\n\n  resetListAndRef = () => {\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n      scrollListener,\n    } = this.initializeProperties();\n    const { scrollRef } = this.props;\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    if (scrollRef && scrollRef.current !== this.scrollListener) {\n      this.scrollListener = scrollListener;\n      this.attachScrollListener();\n    }\n    this.resetList();\n  };\n\n  componentDidUpdate(prevProps: P) {\n    if (this.shouldResetList(prevProps)) {\n      this.resetListAndRef();\n    }\n  }\n\n  setCustomScrollRef = () => {\n    this.resetListAndRef();\n  };\n\n  getTopViewportRowIndex = (scrollTop: number) => {\n    return Math.max(Math.floor(scrollTop / this.props.rowHeight), 0);\n  };\n\n  getBottomViewportRowIndex = (viewportBottom: number) => {\n    let viewportBottomRow = viewportBottom / this.props.rowHeight;\n    if (Number.isInteger(viewportBottomRow)) viewportBottomRow -= 1;\n    else viewportBottomRow = Math.floor(viewportBottomRow);\n    return Math.min(viewportBottomRow, this.totalRows - 1);\n  };\n\n  getResetViewportBottom = () => {\n    if (this.fullListRef) {\n      const { rootMarginBottom = 0, rootMarginTop = 0 } = this.props;\n      const scrollTop = this.getScrollTop();\n      const fullWindowHeight =\n        this.windowHeight + rootMarginTop + rootMarginBottom;\n      return scrollTop + fullWindowHeight - rootMarginBottom;\n    }\n    return this.prevScroll + this.windowHeight;\n  };\n\n  render() {\n    const {\n      listTagName,\n      listClassName,\n      data,\n      width,\n      rowComponent,\n      rowTagName,\n      rowClassName,\n    } = this.props;\n\n    const { renderedRowIndex, scrollState } = this.state;\n    console.log(\"render\");\n\n    const ListTag: any = listTagName || \"div\";\n    const RowTag: any = rowTagName || \"div\";\n    const RowComponent: React.ElementType<RowProps> = rowComponent;\n    return (\n      <ListTag\n        className={classNames(\"react-recycled-list\", listClassName)}\n        style={{\n          height: this.fullHeight,\n          position: \"relative\",\n          width,\n        }}\n        ref={this.fullListRef}\n      >\n        {renderedRowIndex.map((absoluteRowIndex, index) => {\n          const dataIndexInfo = this.rowToDataIndexMap[absoluteRowIndex];\n          const startDataIndex = dataIndexInfo[0];\n          const endDataIndex = dataIndexInfo[1];\n          return (\n            <RowTag\n              key={index}\n              style={{\n                position: \"absolute\",\n                top: this.rowPositions[absoluteRowIndex],\n                height: this.rowHeights[absoluteRowIndex],\n                width: \"100%\",\n                boxSizing: \"border-box\",\n              }}\n              className={classNames(\"react-recycled-row\", rowClassName)}\n            >\n              <RowComponent\n                data={data}\n                dataIndex={startDataIndex}\n                dataEndIndex={endDataIndex}\n                row={absoluteRowIndex}\n                column={endDataIndex - startDataIndex}\n                isScrolling={scrollState[index]}\n              />\n            </RowTag>\n          );\n        })}\n      </ListTag>\n    );\n  }\n}\n","import React from \"react\";\nimport Highlight from \"react-highlight.js\";\nexport default function GeneralPage(props: { code: string; Demo: any }) {\n  const { code, Demo } = props;\n  return (\n    <>\n      <div className=\"demo-section half-section\">\n        <Demo />\n      </div>\n      <div className=\"code-section half-section\">\n        <div className=\"code-wrapper\">\n          <Highlight language=\"js\">{code}</Highlight>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function randInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function generateRamdomRowHeightAndColumn(dataLength: number) {\n  const heights: number[] = [];\n  const columns: number[] = [];\n  let nextDataIndex = 0;\n  for (let i = 0; nextDataIndex < dataLength; i++) {\n    heights[i] = randInt(60, 140);\n    const column = randInt(1, 4);\n    const tempNextDataIndex = nextDataIndex + column;\n    columns[i] =\n      tempNextDataIndex > dataLength ? dataLength - nextDataIndex : column;\n    nextDataIndex = tempNextDataIndex;\n  }\n\n  return [heights, columns];\n}\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { Avatar, Chip, CircularProgress } from \"@material-ui/core\";\n\nexport default function SimpleList() {\n  return <GeneralPage code={code} Demo={SimpleListDemo} />;\n}\n\nfunction SimpleListDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList height={500} rowComponent={Row} data={data} rowHeight={100} />\n  );\n}\n\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, index, style } = props;\n  const value = data[dataIndex];\n  React.useEffect(() => {\n    console.log(\"render\");\n    return () => {\n      console.log(\"unmount\");\n    };\n  }, []);\n  return <div key={0} style={style as any} className=\"react-recycled-row\">{value}</div>;\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction SimpleListDemo() {\n\n  const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100}/>\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n  // the data here is the same data that is passed into the FixedList\n  const { data, dataIndex } = props;\n\n  // Note, the css you see in the demo above is not defined here, check the code sandbox for more\n\n  const value = data[dataIndex];\n  return <div>{value}</div>;\n})`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\n\nexport default function SimpleGrid() {\n  return <GeneralPage code={code} Demo={SimpleGridDemo} />;\n}\n\nfunction SimpleGridDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList\n      height={300}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      column={4}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const rowStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  const columnStyle = {\n    width: \"25%\",\n    textAlign: \"center\" as any,\n  };\n  return (\n    <div key={dataIndex} style={rowStyle}>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction SimpleGridDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    return <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} column={4} />\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex } = props;\n\n    // You are given the start and end index of the data in this row. You style and arrange the columns yourself\n    // Note the data item at dataEndIndex is not included in the row. If dataIndex = 0 and dataEndIndex = 3 then the data in this row is 0, 1 and 2\n\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    // Note you don't have to use in-line styling, you can style it however you want\n    const rowStyle = {\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n    };\n    const columnStyle = {\n        width: \"25%\",\n        textAlign: \"center\",\n    };\n    return (\n        <div key={dataIndex} style={rowStyle}>\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from \"react\";\nimport { RowProps } from \"../TypeDef\";\nimport VariableList from \"../VariableSizeList\";\nimport GeneralPage, { randInt } from \"./GeneralPage\";\n\nexport default function VariableRowHeight() {\n  return <GeneralPage code={code} Demo={VariableRowHeightDemo} />;\n}\n\nfunction VariableRowHeightDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const rowHeights = data.map((_, index) => randInt(60, 140));\n\n  return (\n    <VariableList\n      height={400}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      rowHeights={rowHeights}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  return (\n    <div\n      key={dataIndex}\n      style={{\n        textAlign: \"center\",\n      }}\n    >\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { VariableList } from \"react-recycled-list\";\n\nfunction VariableRowHeightDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n\n    // You define the height of each row. In this case, each row has random height between 60 and 140\n    // Note the length of this array must match the total amount of rows in the list/grid\n\n    const rowHeights = data.map((_, index) => randInt(60, 140));\n    \n    // The rowHeight prop here is an estimate(average) of the height of each row\n\n    return <VariableList height={350} rowComponent={Row} data={data} rowHeight={100} rowHeights={rowHeights}/>;\n}\n  \nconst Row = React.memo(function (props) {\n    const { data, dataIndex } = props;\n    const value = data[dataIndex];\n\n    return <div key={dataIndex}>{value}</div>\n});`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage, { randInt } from \"./GeneralPage\";\n\nexport default function VariableColumn() {\n  return <GeneralPage code={code} Demo={VariableColumnDemo} />;\n}\n\nfunction VariableColumnDemo() {\n  const columnsInEachRow = Array(300).fill(null).map(() => randInt(1, 4));\n  const totalNumberOfItems = columnsInEachRow.reduce(\n    (acc, column) => column + acc,\n    0\n  );\n  const data = Array(totalNumberOfItems)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList\n      height={400}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      rowColumns={columnsInEachRow}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const rowStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  const widthMap: any = {\n      1: \"100%\",\n      2: \"50%\",\n      3: \"33.33%\",\n      4: \"25%\"\n  }\n\n  const columnStyle = {\n    width: widthMap[column] as any,\n    textAlign: \"center\" as any,\n  };\n  return (\n    <div key={dataIndex} style={rowStyle}>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction VariableColumnDemo() {\n\n    // Define 300 rows of data, each row has a random number of column between 1 and 4\n\n    const columnsInEachRow = Array(300).fill(null).map(() => randInt(1, 4));\n\n    // Calculate the total amount of items/columns in the list\n\n    const totalNumberOfItems = columnsInEachRow.reduce((acc, column) => column + acc, 0);\n\n    // Define the data\n\n    const data = Array(totalNumberOfItems).fill(null).map((_, index) => \\`item \\${index}\\`);\n\n    // It is up to you to define your data and rowColumns, but the total number of columns from rowColumn must be equal to the length of data\n\n    return <FixedList height={400} rowComponent={Row} data={data} rowHeight={100} rowColumns={columnsInEachRow} />\n}\n\nconst Row = React.memo(function (props) {\n\n    // column is the number of column in current row. It can also be calculated as dataEndIndex - dataIndex\n    \n    const { data, dataIndex: dataStartIndex, dataEndIndex, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const rowStyle = {\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n    };\n\n    const widthMap = {\n        1: \"100%\",\n        2: \"50%\",\n        3: \"33.33%\",\n        4: \"25%\"\n    }\n\n    const columnStyle = {\n        width: widthMap[column],\n        textAlign: \"center\",\n    };\n    return (\n        <div key={dataIndex} style={rowStyle}>\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { FullWindowFixedList } from \"../Export\";\n\nexport default function FullWindow() {\n  return (\n    <>\n      <div className=\"code-section half-section\">\n        <div className=\"code-wrapper\">\n          <Highlight language=\"js\">{code}</Highlight>\n        </div>\n      </div>\n      <div className=\"demo-section half-section\">\n        <FullWindowDemo />\n      </div>\n    </>\n  );\n}\n\nfunction FullWindowDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return <FullWindowFixedList rowComponent={Row} data={data} rowHeight={100}/>;\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  return (\n    <div\n      key={dataIndex}\n      style={{\n        textAlign: \"center\",\n      }}\n    >\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FullWindowFixedList, FullWindowVariableList } from \"react-recycled-list\";\n\n// Important! FullWindowFixedList and FullWindowVariableList are not responsive by default!\n// You must wrap in it the responsive container to make it responsive\n\nfunction FullWindowDemo() {\n\n    const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n    // FullWindowFixedList is essentially the same as FixedList but without the height prop\n    // FullWindowVariableList is essentially the same as VariableList but without the height prop\n\n    return <FullWindowFixedList rowComponent={Row} data={data} rowHeight={100} />\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n    // the data here is the same data that is passed into the FixedList\n    const { data, dataIndex } = props;\n\n    const value = data[dataIndex];\n    return <div>{value}</div>;\n})`;\n","import React from \"react\";\nimport VariableList from \"../VariableSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport GeneralPage, { generateRamdomRowHeightAndColumn } from \"./GeneralPage\";\n\nexport default function VariableRowHeightColumn() {\n  return <GeneralPage code={code} Demo={VariableRowHeightColumnDemo} />;\n}\n\nfunction VariableRowHeightColumnDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const [rowHeights, rowColumns] = generateRamdomRowHeightAndColumn(data.length)\n\n  return (\n    <VariableList\n      height={400}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      rowColumns={rowColumns}\n      rowHeights={rowHeights}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const rowStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  const widthMap: any = {\n    1: \"100%\",\n    2: \"50%\",\n    3: \"33.33%\",\n    4: \"25%\",\n  };\n\n  const columnStyle = {\n    width: widthMap[column] as any,\n    textAlign: \"center\" as any,\n  };\n  return (\n    <div key={dataIndex} style={rowStyle}>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { VariableList } from \"react-recycled-list\";\n\n// Function for generating randow row heights and columns\n// Each row will have height between 60 and 140 px and column between 1 and 4\nfunction generateRamdomRowHeightAndColumn(dataLength: number) {\n    const heights: number[] = [];\n    const columns: number[] = [];\n    let nextDataIndex = 0;\n    for (let i = 0; nextDataIndex < dataLength; i++) {\n      heights[i] = randInt(60, 140);\n      const column = randInt(1, 4);\n      const tempNextDataIndex = nextDataIndex + column;\n      columns[i] =\n        tempNextDataIndex > dataLength ? dataLength - nextDataIndex : column;\n      nextDataIndex = tempNextDataIndex;\n    }\n  \n    return [heights, columns];\n}\n  \nfunction VariableRowHeightColumnDemo() {\n    // For demo purposes I used a random generator. You can however define it whatever you want it to be.\n    // The key takeaway is the length of rowHeights must equal to the length of rowColumns\n    // And the total number of column calculated from rowColumns must be equal to the length of data\n    const [rowHeights, rowColumns] = generateRamdomRowHeightAndColumn(data.length)\n  \n    const data = Array(totalNumberOfItems).fill(null).map((_, index) => \\`item \\${index}\\`);\n  \n    return <VariableList height={400} rowComponent={Row} data={data} rowHeight={100} rowColumns={rowColumns} rowHeights={rowHeights}/>\n}\n  \nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n  \n    const rowStyle = {\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n    };\n  \n    const widthMap = {\n        1: \"100%\",\n        2: \"50%\",\n        3: \"33.33%\",\n        4: \"25%\"\n    }\n  \n    const columnStyle = {\n        width: widthMap[column],\n        textAlign: \"center\",\n    };\n\n    return (\n        <div key={dataIndex} style={rowStyle}>\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { FullWindowFixedList } from \"../Export\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\n\nexport default function CustomWindow() {\n  return <GeneralPage code={code} Demo={CustomWindowDemo} />;\n}\n\nfunction CustomWindowDemo() {\n  const scrollRef = React.useRef();\n  const listRef = React.useRef<any>();\n  const [_, setComponentHasMounted] = React.useState(false);\n  React.useEffect(() => {\n    setComponentHasMounted(true);\n    listRef.current.setCustomScrollRef();\n  }, []);\n\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const containerStyle = {\n    height: 500,\n    width: \"100%\",\n    overflowY: \"scroll\" as any,\n  };\n\n  const fillerStyle = {\n    textAlign: \"center\" as any,\n    padding: 20,\n  };\n\n  return (\n    <div ref={scrollRef as any} style={containerStyle}>\n      <div style={fillerStyle}>some random ui</div>\n      <div style={fillerStyle}>some random ui</div>\n      <FullWindowFixedList\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        scrollRef={scrollRef}\n        ref={listRef as any}\n      />\n      <div style={fillerStyle}>some random ui</div>\n      <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  return (\n    <div\n      key={dataIndex}\n      style={{\n        textAlign: \"center\",\n      }}\n    >\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FullWindowFixedList, FullWindowVariableList } from \"react-recycled-list\";\n\nfunction CustomWindowDemo() {\n  const scrollRef = React.useRef();\n  const listRef = React.useRef();\n\n  // Important! ref.current is initially undefined. When ref.current is set you must notify FullWindowFixedList or FullWindowVariableList \n  // You can notify it by rerendering or by calling setCustomScrollRef on the list class\n\n  const [_, setComponentHasMounted] = React.useState(false);\n  React.useEffect(() => {\n    // Once scrollRef.current is set, you must notify the list. You can do it by setState in a useEffect which cause rerendering\n    setComponentHasMounted(true);\n    // Or you can do it by calling the setCustomScrollRef method on the list\n    listRef.current.setCustomScrollRef();\n  }, []);\n\n  const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n\n  const containerStyle = {\n    height: 500,\n    width: \"100%\",\n    overflowY: \"scroll\",\n  };\n\n  const fillerStyle = {\n    textAlign: \"center\",\n    padding: 20,\n  };\n\n  return (\n    <div ref={ref} style={containerStyle}>\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n              <FullWindowFixedList\n                    rowComponent={Row}\n                    data={data}\n                    rowHeight={100}\n                    scrollRef={scrollRef}\n                    ref={listRef}\n              />\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  return <div key={dataIndex}>{value}</div>;\n});`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport ResponsiveContainer from \"../ResponsiveContainer\";\n\nexport default function ResponsiveContainerPage() {\n  return <GeneralPage code={code} Demo={ResponsiveContainerDemo} />;\n}\n\nfunction ResponsiveContainerDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const renderList = (sizeInfo: { width: number; height: number }) => {\n    console.log(sizeInfo);\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FixedList\n        height={sizeInfo.height}\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        column={column}\n      />\n    );\n  };\n\n  const resizableContainerStyle = {\n    width: \"100%\",\n    height: 400,\n    resize: \"both\",\n    overflow: \"auto\"\n  };\n\n  return (\n    <div style={resizableContainerStyle as any}>\n      <ResponsiveContainer render={renderList} />\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const rowStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  const columnStyle = {\n    width: column === 1? \"100%\" : \"50%\",\n    textAlign: \"center\" as any,\n  };\n  return (\n    <div key={dataIndex} style={rowStyle}>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { ResponsiveContainer } from \"react-recycled-list\";\n\n// Try resizing the list, the column will change on the 1200px break point\n\nfunction ResponsiveContainerDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n  \n    const renderList = (sizeInfo) => {\n      const { width, height } = sizeInfo;\n      const column = width > 1200 ? 2 : 1;\n      return (\n        <FixedList\n                        height={sizeInfo.height}\n                        rowComponent={Row}\n                        data={data}\n                        rowHeight={100}\n                        column={column}\n                />\n      );\n    };\n  \n    const resizableContainerStyle = {\n      width: \"100%\",\n      height: 400,\n      resize: \"both\",\n      overflow: \"auto\"\n    };\n  \n    return (\n      <div style={resizableContainerStyle}>\n                        <ResponsiveContainer render={renderList} />\n            </div>\n    );\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n  \n    const rowStyle = {\n      height: \"100%\",\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\",\n    };\n  \n    const columnStyle = {\n      width: column === 1? \"100%\" : \"50%\",\n      textAlign: \"center\",\n    };\n    return (\n      <div key={dataIndex} style={rowStyle}>\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});`;\n","import React, { Component } from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport { classNames } from \"./utils\";\nimport { addListener, removeListener } from \"resize-detector\";\nimport { ResponsiveContainerProps } from \"./ResponsiveContainer\";\ninterface FullWindowResponsiveContainerProps extends ResponsiveContainerProps {\n  scrollContainerRef?: React.MutableRefObject<any>;\n}\n\nexport default function FullWindowResponsiveContainer(\n  props: FullWindowResponsiveContainerProps\n) {\n  const {\n    render,\n    debounceResize,\n    debounceInterval,\n    serverSideHeight,\n    scrollContainerRef,\n  } = props;\n  const targetRef = React.useRef<HTMLDivElement>();\n  const { width, height } = useResizeDetector({\n    refreshMode: debounceResize ? \"debounce\" : undefined,\n    refreshRate: debounceInterval ? debounceInterval : 100,\n    targetRef: \"scrollContainerRef\" in props ? scrollContainerRef : targetRef,\n  });\n  const [hasMounted, setHasMounted] = React.useState(false);\n  React.useEffect(() => {\n    if (serverSideHeight !== undefined) {\n      setHasMounted(true);\n    }\n  });\n  return (\n    <>\n      {render({\n        width: width || 0,\n        height: height || (!hasMounted && serverSideHeight) || 0,\n      })}\n\n      <div\n        ref={targetRef as React.RefObject<HTMLDivElement>}\n        style={{ position: \"fixed\", height: \"100vh\", width: \"100vw\" }}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport FullWindowResponsiveContainer from \"../FullWindowResponsiveContainer\";\nimport { FullWindowFixedList } from \"../Export\";\n\nexport default function FullWindowResponsiveContainerPage() {\n  return (\n    <>\n      <div className=\"code-section half-section\">\n        <div className=\"code-wrapper\">\n          <Highlight language=\"js\">{code}</Highlight>\n        </div>\n      </div>\n      <div className=\"demo-section half-section\">\n        <FullWindowResponsiveContainerDemo />\n      </div>\n    </>\n  );\n}\n\nfunction FullWindowResponsiveContainerDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const renderList = (sizeInfo: { width: number; height: number }) => {\n    console.log(sizeInfo);\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FullWindowFixedList\n        windowHeight={height}\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        column={column}\n      />\n    );\n  };\n  return <FullWindowResponsiveContainer render={renderList} />;\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const rowStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  const columnStyle = {\n    width: column === 1 ? \"100%\" : \"50%\",\n    textAlign: \"center\" as any,\n  };\n  return (\n    <div key={dataIndex} style={rowStyle}>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FullWindowResponsiveContainer } from \"react-recycled-list\";\n\n// Try resizing the window, the column will change on the 1200px break point\n\nfunction FullWindowResponsiveContainerDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n  \n    const renderList = (sizeInfo) => {\n      const { width, height } = sizeInfo;\n      const column = width > 1200 ? 2 : 1;\n      return (\n        <FixedList\n                        height={sizeInfo.height}\n                        rowComponent={Row}\n                        data={data}\n                        rowHeight={100}\n                        column={column}\n                />\n      );\n    };\n  \n    return <FullWindowResponsiveContainer render={renderList} />;\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n  \n    const rowStyle = {\n      height: \"100%\",\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\",\n    };\n  \n    const columnStyle = {\n      width: column === 1? \"100%\" : \"50%\",\n      textAlign: \"center\",\n    };\n    return (\n      <div key={dataIndex} style={rowStyle}>\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { Button } from \"@material-ui/core\";\n\nexport default function LazyLoadingAdvanced() {\n  return <GeneralPage code={code} Demo={LazyLoadingDemo} />;\n}\n\nconst numberOfItemPerPage = 20;\nfunction fetchData(page: number, onSuccess: any) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    for (\n      let i = startDataIndex;\n      i < startDataIndex + numberOfItemPerPage;\n      i++\n    ) {\n      data.push(`item ${i + 1}`);\n    }\n    onSuccess(data, page);\n  }, 1500);\n}\n\nconst initialStore: {\n  data: { [key: string]: any[] };\n  nextPage: number;\n  isLoading: boolean;\n} = {\n  data: {\n    1: Array(numberOfItemPerPage)\n      .fill(null)\n      .map(() => undefined),\n  },\n  nextPage: 1,\n  isLoading: false,\n};\n\nfunction LazyLoadingDemo() {\n  const [store, setStore] = React.useState(initialStore);\n\n  const onFetchDataSuccess = (newData: any[], page: number) => {\n    const newStoreData: { [key: string]: any[] } = {\n      ...store.data,\n      [page]: newData,\n    };\n    const nextPage = page + 1;\n    const hasNextPage = nextPage <= 5;\n    if (hasNextPage) {\n      newStoreData[nextPage] = [undefined];\n    }\n    setStore({\n      ...store,\n      data: newStoreData,\n      isLoading: false,\n      nextPage: nextPage,\n    });\n  };\n\n  React.useEffect(() => {\n    fetchData(store.nextPage, onFetchDataSuccess);\n  }, []);\n\n  const onRenderedRowChange = (renderInfo: {\n    firstRenderedRowIndex: number;\n    firstRenderedDataIndex: number;\n    lastRenderedRowIndex: number;\n    lastRenderedDataIndex: number;\n    lastRowIndex: number;\n  }) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRowIndex,\n      lastRenderedDataIndex,\n    } = renderInfo;\n    if (lastRenderedDataIndex === lastRowIndex) {\n      if (store.isLoading === false && store.nextPage <= 5) {\n        setStore({ ...store, isLoading: true });\n        fetchData(store.nextPage, onFetchDataSuccess);\n      }\n    }\n  };\n\n  const listData = Object.values(store.data).flat();\n\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={listData}\n      rowHeight={100}\n      onRenderedRowChange={onRenderedRowChange}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div key={dataIndex}>{displayValue}</div>;\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\n// This is a rather complicated example\n// The key point is to utilize onRenderedRowChange or onVisibleRowChange to load your data\n\nconst numberOfItemPerPage = 20;\n\n// Just a simulation of an API call\nfunction fetchData(page, onSuccess) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    const endDataIndex = startDataIndex + numberOfItemPerPage\n    for (let i = startDataIndex; i < endDataIndex; i++) {\n      data.push(\\`item \\${i + 1}\\`);\n    }\n    onSuccess(data, page);\n  }, 2000);\n}\n\n// Use a map to store the data (you do not have to do the same, the implementation is up to you)\nconst initialStore = {\n  data: { 1: Array(numberOfItemPerPage).fill(null).map(() => undefined) },\n  nextPage: 0,\n  isLoading: false,\n};\n\nfunction LazyLoadingDemo() {\n  const [store, setStore] = React.useState(initialStore);\n\n  const onFetchDataSuccess = (newData, page) => {\n    const newStoreData = { ...store.data, [page]: newData };\n    // For demo purpose I set the max page to be 5\n    const nextPage = page + 1\n    const hasNextPage = nextPage <= 5;\n    if (hasNextPage) {\n      newStoreData[nextPage] = [undefined];\n    }\n    setStore({ ...store, data: newStoreData, isLoading: false, nextPage: nextPage });\n  };\n\n  React.useEffect(() => {\n    // Initial fetch\n    fetchData(store.nextPage, onFetchDataSuccess)\n  }, [])\n\n  const onRenderedRowChange = (renderInfo) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRenderedDataIndex,\n      lastRowIndex,\n    } = renderInfo;\n    // If the last row is rendered (NOT visible yet!) and we are not already loading data, we fetch new data\n    // If you want to fetch data when the last row is visible then use onVisibleRowChange\n    if (lastRenderedRowIndex === lastRowIndex) {\n      if (store.isLoading === false) {\n        setStore({ ...store, isLoading: true });\n        fetchData(store.nextPage, onFetchDataSuccess)\n      }\n    }\n  };\n\n  const listData = Object.values(store.data).flat();\n\n  return (\n    <FixedList\n              height={500}\n              rowComponent={Row}\n              data={listData}\n              rowHeight={100}\n              onRenderedRowChange={onRenderedRowChange}\n        />\n  );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div key={dataIndex}>{displayValue}</div>;\n})`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { Button } from \"@material-ui/core\";\n\nexport default function LazyLoadingSimple() {\n  return <GeneralPage code={code} Demo={LazyLoadingDemo} />;\n}\n\nconst numberOfItemPerPage = 20;\nfunction LazyLoadingDemo() {\n  const [data, setData] = React.useState(\n    Array(numberOfItemPerPage)\n      .fill(null)\n      .map((_, index) => `item ${index + 1}`)\n  );\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadData = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      const newData = [...data];\n      const startIndex = data.length;\n      const endIndex = data.length + numberOfItemPerPage;\n      for (let i = startIndex; i < endIndex; i++) {\n        newData.push(`item ${i + 1}`);\n      }\n      setData(newData);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onRenderedRowChange = (renderInfo: {\n    firstRenderedRowIndex: number;\n    firstRenderedDataIndex: number;\n    lastRenderedRowIndex: number;\n    lastRenderedDataIndex: number;\n    lastRowIndex: number;\n  }) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRowIndex,\n      lastRenderedDataIndex,\n    } = renderInfo;\n    if (lastRenderedDataIndex === lastRowIndex) {\n      if (isLoading === false) {\n        loadData();\n      }\n    }\n  };\n\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      onRenderedRowChange={onRenderedRowChange}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div key={dataIndex}>{displayValue}</div>;\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\nconst numberOfItemPerPage = 20;\n\nfunction LazyLoadingDemo() {\n  const [data, setData] = React.useState( Array(numberOfItemPerPage).fill(null).map((_, index) => \\`item \\${index + 1}\\`) );\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadData = () => {\n    setTimeout(() => {\n      const newData = [...data];\n      const startIndex = data.length;\n      const endIndex = data.length + numberOfItemPerPage;\n      for (let i = startIndex; i < endIndex; i++) {\n        newData.push(\\`item \\${i + 1}\\`);\n      }\n      setData(newData);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onRenderedRowChange = (renderInfo) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRenderedDataIndex,\n      lastRowIndex,\n    } = renderInfo;\n    // If the last row is rendered (NOT visible yet!) and we are not already loading data, we fetch new data\n    // If you want to fetch data when the last row is visible then use onVisibleRowChange\n    if (lastRenderedDataIndex === lastRowIndex) {\n      if (isLoading === false) {\n        loadData();\n      }\n    }\n  };\n\n  return (\n    <FixedList\n              height={500}\n              rowComponent={Row}\n              data={data}\n              rowHeight={100}\n              onRenderedRowChange={onRenderedRowChange}\n        />\n  );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div key={dataIndex}>{displayValue}</div>;\n})`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { FixedSizeGrid, FixedSizeList } from \"react-window\";\n\nexport default function ReactWindowComparison() {\n  return <GeneralPage code={code} Demo={ReactWindow} />;\n}\n\nfunction ReactWindow() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => index);\n  // const [heights, columns] = generateRamdomRowHeightAndColumn(data.length);\n  return (\n    <div className=\"App\">\n      <FixedSizeList height={500} itemSize={100} width=\"100%\" itemCount={data.length}>\n        {ReactWindowRow}\n      </FixedSizeList>\n    </div>\n  );\n}\n\nconst ReactWindowRow = React.memo(function (props: any) {\n  const { index, style } = props;\n  return (\n    <div className=\"react-recycled-row\" style={style}>\n      {`item ${index}`}\n    </div>\n  );\n});\nfunction SimpleListDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList height={500} rowComponent={Row} data={data} rowHeight={100} />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  return (\n    <div\n      key={dataIndex}\n      style={{\n        textAlign: \"center\",\n      }}\n    >\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction SimpleListDemo() {\n\n  const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100}/>\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n  // the data here is the same data that is passed into the FixedList\n  const { data, dataIndex } = props;\n\n  // Note, the css you see in the demo above is not defined here, check the code sandbox for more\n\n  const value = data[dataIndex];\n  return <div>{value}</div>;\n})`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { Button } from \"@material-ui/core\";\n\nexport default function DynamicLoading() {\n  return <GeneralPage code={code} Demo={DynamicLoadingDemo} />;\n}\n\nconst numberOfItemPerPage = 10;\nconst numberOfPages = 10;\nfunction fetchData(page: number, onSuccess: any) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    for (\n      let i = startDataIndex;\n      i < startDataIndex + numberOfItemPerPage;\n      i++\n    ) {\n      data.push(`item ${i + 1}`);\n    }\n    onSuccess(data, page);\n  }, 1000);\n}\n\ntype PageData = {\n  [key: string]: {\n    isLoading: boolean;\n    hasLoaded: boolean;\n    data: any[];\n  };\n};\n\nfunction populateInitialPage() {\n  const page: PageData = {};\n  for (let i = 1; i <= numberOfPages; i++) {\n    page[i] = {\n      isLoading: false,\n      hasLoaded: false,\n      data: Array(numberOfItemPerPage)\n        .fill(null)\n        .map(() => undefined),\n    };\n  }\n  return page;\n}\nconst initialPagedData = populateInitialPage();\n\nfunction getPageFromDataIndex(index: number) {\n  return Math.floor(index / numberOfItemPerPage) + 1;\n}\n\nfunction DynamicLoadingDemo() {\n  const [pagedData, setPagedData] = React.useState(initialPagedData);\n\n  const onFetchDataSuccess = (newData: any[], page: number) => {\n    setPagedData((pagedData) => {\n      return {\n        ...pagedData,\n        [page]: {\n          data: newData,\n          hasLoaded: true,\n          isLoading: false,\n        },\n      };\n    });\n  };\n\n  const onRenderedRowChange = (renderInfo: {\n    firstRenderedRowIndex: number;\n    firstRenderedDataIndex: number;\n    lastRenderedRowIndex: number;\n    lastRenderedDataIndex: number;\n    lastRowIndex: number;\n  }) => {\n    const {\n      firstRenderedDataIndex,\n      lastRenderedDataIndex,\n    } = renderInfo;\n\n    const currentTopPage = getPageFromDataIndex(firstRenderedDataIndex);\n    const currentBottomPage = getPageFromDataIndex(lastRenderedDataIndex);\n    const currentPages = [currentTopPage, currentBottomPage];\n\n    if (currentTopPage === currentBottomPage) currentPages.pop();\n\n    currentPages.forEach((page) => {\n      if (!pagedData[page].hasLoaded && !pagedData[page].isLoading) {\n        setPagedData({\n          ...pagedData,\n          [page]: { ...pagedData[page], isLoading: true },\n        });\n\n        fetchData(page, onFetchDataSuccess);\n      }\n    });\n  };\n  const dataList = React.useMemo(\n    () =>\n      Object.values(pagedData)\n        .map(({ data }) => data)\n        .flat(),\n    [pagedData]\n  );\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={dataList}\n      rowHeight={100}\n      onRenderedRowChange={onRenderedRowChange}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div key={dataIndex}>{displayValue}</div>;\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\n// This is a rather complicated example\n// The key point is to paginate your data, and utilize onRenderedRowChange or onVisibleRowChange to load your data\n\nconst numberOfItemPerPage = 20;\n\nconst numberOfItemPerPage = 10;\nconst numberOfPages = 10;\n// Simulation of an API\nfunction fetchData(page, onSuccess) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    for (\n      let i = startDataIndex;\n      i < startDataIndex + numberOfItemPerPage;\n      i++\n    ) {\n      data.push(\\`item \\${i + 1}\\`);\n    }\n    onSuccess(data, page);\n  }, 1000);\n}\n\nfunction populateInitialPage() {\n    const page: PageData = {};\n    for (let i = 1; i <= numberOfPages; i++) {\n      page[i] = {\n        isLoading: false,\n        hasLoaded: false,\n        data: Array(numberOfItemPerPage)\n          .fill(null)\n          .map(() => undefined),\n      };\n    }\n    return page;\n}\nconst initialPagedData = populateInitialPage();\n\nfunction getPageFromDataIndex(index: number) {\n    return Math.floor(index / numberOfItemPerPage) + 1;\n}\n  \nfunction DynamicLoadingDemo() {\n    const [pagedData, setPagedData] = React.useState(initialPagedData);\n  \n    const onFetchDataSuccess = (newData, page) => {\n      // Becareful of stale state!\n      setPagedData((pagedData) => {\n        return {\n          ...pagedData,\n          [page]: {\n            data: newData,\n            hasLoaded: true,\n            isLoading: false,\n          },\n        };\n      });\n    };\n  \n    const onRenderedRowChange = (renderInfo) => {\n      const {\n        firstRenderedDataIndex,\n        lastRenderedDataIndex,\n      } = renderInfo;\n  \n      const currentTopPage = getPageFromDataIndex(firstRenderedDataIndex);\n      const currentBottomPage = getPageFromDataIndex(lastRenderedDataIndex);\n      const currentPages = [currentTopPage, currentBottomPage];\n  \n      if (currentTopPage === currentBottomPage) currentPages.pop();\n  \n      currentPages.forEach((page) => {\n        if (!pagedData[page].hasLoaded && !pagedData[page].isLoading) {\n          setPagedData({\n            ...pagedData,\n            [page]: { ...pagedData[page], isLoading: true },\n          });\n          fetchData(page, onFetchDataSuccess);\n        }\n      });\n    };\n    const dataList = Object.values(pagedData).map(({ data }) => data).flat();\n\n    return (\n      <FixedList\n                    height={500}\n                    rowComponent={Row}\n                    data={dataList}\n                    rowHeight={100}\n                    onRenderedRowChange={onRenderedRowChange}\n            />\n    );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div key={dataIndex}>{displayValue}</div>;\n})`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { Avatar, Chip, CircularProgress } from \"@material-ui/core\";\n\nexport default function ScrollIndicator() {\n  return <GeneralPage code={code} Demo={ScrollIndicatorDemo} />;\n}\n\nfunction ScrollIndicatorDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList height={500} rowComponent={Row} data={data} rowHeight={100} useScrollingIndicator/>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, isScrolling } = props;\n  const value = isScrolling? \"scrolling\" : data[dataIndex];\n  return <div key={dataIndex}>{value}</div>;\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\n// If your row component is expensive to render, you can consider rendering a lighter component when scrolling\n\nfunction ScrollIndicatorDemo() {\n  const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100} useScrollingIndicator/>\n}\n\nconst Row = React.memo(function (props: RowProps) {\n    const { data, dataIndex, isScrolling } = props;\n    const value = isScrolling? \"scrolling\" : data[dataIndex];\n    return <div key={dataIndex}>{value}</div>;\n});`;\n","import React from \"react\";\nimport FixedList from \"../FixedSizeList\";\nimport { RowProps } from \"../TypeDef\";\nimport Highlight from \"react-highlight.js\";\nimport GeneralPage from \"./GeneralPage\";\nimport { Button } from \"@material-ui/core\";\n\nexport default function ScrollTo() {\n  return <GeneralPage code={code} Demo={ScrollToDemo} />;\n}\n\nfunction ScrollToDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n  const ref = React.useRef<FixedList>() as React.RefObject<FixedList>;\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          alignItems: \"center\",\n          padding: 10,\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          style={{ textTransform: \"none\" }}\n          onClick={() => ref.current?.scrollTo(350)}\n        >\n          Scroll to scrollTop 350\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          style={{ textTransform: \"none\" }}\n          onClick={() => ref.current?.scrollToRow(9)}\n        >\n          Scroll to 10th row\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          style={{ textTransform: \"none\" }}\n          onClick={() => ref.current?.scrollToDataIndex(86)}\n        >\n          Scroll to 87th data\n        </Button>\n      </div>\n      <FixedList\n        height={300}\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        column={4}\n        ref={ref}\n      />\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const rowStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  const columnStyle = {\n    width: \"25%\",\n    textAlign: \"center\" as any,\n  };\n  return (\n    <div key={dataIndex} style={rowStyle}>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} column={4} ref={ref}/>\n                </div>\n    )\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const rowStyle = {\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n    };\n    const columnStyle = {\n        width: \"25%\",\n        textAlign: \"center\",\n    };\n    return (\n        <div key={dataIndex} style={rowStyle}>\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from \"react\";\nimport {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport \"./root.scss\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport SimpleList from \"./pages/SimpleList\";\nimport SimpleGrid from \"./pages/SimpleGrid\";\nimport VariableRowHeight from \"./pages/VariableRowHeight\";\nimport VariableColumn from \"./pages/VariableColumn\";\nimport FullWindow from \"./pages/FullWindow\";\nimport VariableRowHeightColumn from \"./pages/VariableRowHeightColumn\";\nimport CustomWindow from \"./pages/CustomWindow\";\nimport ResponsiveContainerPage from \"./pages/ResponsiveContainer\";\nimport FullWindowResponsiveContainerPage from \"./pages/FullWindowResponsiveContainer\";\nimport LazyLoadingAdvanced from \"./pages/LazyLoadingAdvanced\";\nimport LazyLoadingSimple from \"./pages/LazyLoadingSimple\";\nimport ReactWindowComparison from \"./pages/ReactWindowComparison\";\nimport DynamicLoading from \"./pages/DynamicLoading\";\nimport ScrollIndicator from \"./pages/ScrollIndicator\";\nimport ScrollTo from \"./pages/ScrollTo\";\n\nexport default function SideNav() {\n  const { pathname } = useLocation();\n  return (\n    <div>\n      <Drawer variant=\"permanent\" anchor=\"left\">\n        <Typography variant=\"h6\" className=\"site-title\">\n          React recycled list\n        </Typography>\n        <Divider />\n        <List>\n          <ListItem>\n            <ListItemText primary=\"Introduction\" className=\"first-level\" />\n          </ListItem>\n          <ListItem button className=\"second-level\" component={Link} to=\"/\">\n            <ListItemText primary=\"Why use React recycled list\" />\n          </ListItem>\n          <ListItem>\n            <ListItemText primary=\"Examples\" className=\"first-level\" />\n          </ListItem>\n          {examples.map(({ label, route }) => (\n            <ListItem\n              button\n              key={label}\n              className=\"second-level\"\n              component={Link}\n              to={route}\n              selected={pathname === route}\n            >\n              <ListItemText primary={label} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          <ListItem>\n            <ListItemText primary=\"Components\" className=\"first-level\" />\n          </ListItem>\n          {components.map(({ label, route }) => (\n            <ListItem\n              button\n              key={label}\n              className=\"second-level\"\n              component={Link}\n              to={route}\n              selected={pathname === route}\n            >\n              <ListItemText primary={label} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n    </div>\n  );\n}\n\nexport const examples = [\n  { label: \"Simple List\", route: \"/simple-list\", component: SimpleList },\n  { label: \"VS React window\", route: \"/react-window\", component: ReactWindowComparison },\n  { label: \"Simple Grid\", route: \"/simple-grid\", component: SimpleGrid },\n  {\n    label: \"Variable row height\",\n    route: \"/variable-row-height\",\n    component: VariableRowHeight,\n  },\n  {\n    label: \"Variable column\",\n    route: \"/variable-column\",\n    component: VariableColumn,\n  },\n  {\n    label: \"Variable row height and column \",\n    route: \"/variable-height-column\",\n    component: VariableRowHeightColumn,\n  },\n  { label: \"Full window\", route: \"/full-window\", component: FullWindow },\n  { label: \"Custom window\", route: \"/custom-window\", component: CustomWindow },\n  { label: \"Responsive List/Grid\", route: \"/responsive-list/grid\", component: ResponsiveContainerPage},\n  { label: \"Responsive window\", route: \"/responsive-window\", component: FullWindowResponsiveContainerPage },\n  { label: \"Simple Infinite loading\", route: \"/lazy-loading-simple\", component: LazyLoadingSimple },\n  { label: \"Advanced Infinite loading\", route: \"/lazy-loading-advance\", component: LazyLoadingAdvanced },\n  { label: \"Dynamic loading\", route: \"/dynamic-loading\", component: DynamicLoading },\n  { label: \"Scroll indicator\", route: \"/scroll-indicator\", component: ScrollIndicator },\n  { label: \"Scroll to\", route: \"/scroll-to\", component: ScrollTo },\n  { label: \"Styling\", route: \"/styling\" },\n  { label: \"Server side rendering\", route: \"/styling\" },\n  \n];\n\nexport const components = [\n  { label: \"FixedSizeList\", route: \"/fixedsizelist\" },\n  { label: \"VariableSizeList\", route: \"/variablesizelist\" },\n  { label: \"FixedSizeWindowList\", route: \"/fixedsizewindowlist\" },\n  { label: \"VariableSizeWindowList\", route: \"/variablesizewindowList\" },\n  { label: \"ResponsiveContainer\", route: \"/rResponsivecontainer\" },\n  { label: \"ResponsiveWindowContainer\", route: \"/responsiveWindowcontainer\" },\n];\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FixedList from \"./FixedSizeList\";\nimport VariableSizeList from \"./VariableSizeList\";\nimport { Grid } from \"@material-ui/core\";\nimport { FixedSizeGrid, FixedSizeList } from \"react-window\";\nimport { RowProps } from \"./TypeDef\";\nimport ResponsiveContainer from \"./ResponsiveContainer\";\nimport { FullWindowFixedList } from \"./Export\";\nimport Root from \"./Root\";\nimport FullWindowResponsiveContainer from \"./FullWindowResponsiveContainer\";\n\nfunction randInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateRamdomRowHeightAndColumn(dataLength: number) {\n  const heights: number[] = [];\n  const columns: number[] = [];\n  let nextDataIndex = 0;\n  for (let i = 0; nextDataIndex < dataLength; i++) {\n    heights[i] = randInt(60, 140);\n    const column = randInt(1, 4);\n    const tempNextDataIndex = nextDataIndex + column;\n    columns[i] =\n      tempNextDataIndex > dataLength ? dataLength - nextDataIndex : column;\n    nextDataIndex = tempNextDataIndex;\n  }\n\n  return [heights, columns];\n}\n\nconst initialData = Array(6)\n  .fill(null)\n  .map((_, index) => index);\n\nfunction App() {\n  const childRef = React.useRef() as React.RefObject<VariableSizeList>;\n  const [data, setData] = React.useState(initialData);\n  const [test, setTest] = React.useState(400);\n  const [heights, columns] = generateRamdomRowHeightAndColumn(data.length);\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() =>\n          setData(\n            Array(data.length + 1)\n              .fill(null)\n              .map((_, index) => index)\n          )\n        }\n      >\n        + Data\n      </button>\n      <button\n        onClick={() =>\n          setData(\n            Array(data.length - 1)\n              .fill(null)\n              .map((_, index) => index)\n          )\n        }\n      >\n        - data\n      </button>\n      <button\n        onClick={() => {\n          childRef.current?.scrollToDataIndex(17);\n        }}\n      >\n        scroll to data 17\n      </button>\n      <button\n        onClick={() => {\n          setTest(300);\n        }}\n      >\n        height\n      </button>\n      <VariableSizeList\n        ref={childRef}\n        height={500}\n        data={data}\n        rowHeight={100}\n        // rowHeights={data.map(() => 100)}\n        rowHeights={heights}\n        rowColumns={columns}\n        rowComponent={Row}\n        width={\"100%\"}\n        // onVisibleRowChange={(props) => {\n        //   console.log(props);\n        // }}\n        // useScrollingIndicator\n      />\n    </div>\n  );\n}\n\nfunction FixedListDemo() {\n  const childRef = React.useRef() as React.RefObject<FixedList>;\n  const [data, setData] = React.useState(initialData);\n  const [test, setTest] = React.useState(false);\n  const [heights, columns] = generateRamdomRowHeightAndColumn(data.length);\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() =>\n          setData(\n            Array(data.length + 1)\n              .fill(null)\n              .map((_, index) => index)\n          )\n        }\n      >\n        + Data\n      </button>\n      <button\n        onClick={() =>\n          setData(\n            Array(data.length - 1)\n              .fill(null)\n              .map((_, index) => index)\n          )\n        }\n      >\n        - data\n      </button>\n      <button\n        onClick={() => {\n          childRef.current?.scrollToDataIndex(17);\n        }}\n      >\n        scroll to data 17\n      </button>\n      <FixedList\n        ref={childRef}\n        height={500}\n        data={data}\n        rowHeight={100}\n        // rowHeights={heights}\n        // rowColumns={columns}\n        rowComponent={Row}\n        // onVisibleRowChange={(props) => {\n        //   console.log(props);\n        // }}\n        onRenderedRowChange={(prop) => {console.log(prop)}}\n        // useScrollingIndicator\n        // additionalRenderedRow={1}\n      />\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column, isScrolling } = props;\n  const dataSection = data.slice(dataIndex, dataEndIndex);\n  // let xs: 12 | 6 | 4 | 3 = 12;\n  // if (column === 2) xs = 6;\n  // else if (column === 3) xs = 4;\n  // else if (column === 4) xs = 3;\n  // console.log(`item ${data[dataIndex]}`);\n  // React.useEffect(() => {\n  //   console.log(`${dataIndex} mounted`);\n  //   return () => {\n  //     console.log(`${dataIndex} unmounted`);\n  //   };\n  // }, []);\n  return (\n    <>\n      {dataSection.map((dataItem, index) => {\n        return (\n          <div\n            key={index}\n            style={{\n              width: \"30%\",\n              height: \"100%\",\n              textAlign: \"center\",\n            }}\n          >\n            {`item ${isScrolling ? \"scrolling\" : dataItem}`}\n          </div>\n        );\n      })}\n    </>\n  );\n});\n\nfunction ReactWindow() {\n  const data = Array(300)\n    .fill(null)\n    .map((_, index) => index);\n  const [heights, columns] = generateRamdomRowHeightAndColumn(data.length);\n  return (\n    <div className=\"App\">\n      <FixedSizeGrid\n        columnCount={3}\n        columnWidth={650}\n        height={600}\n        rowCount={300 / 3}\n        rowHeight={100}\n        width={1900}\n        // width=\"100%\"\n      >\n        {ReactWindowRow}\n      </FixedSizeGrid>\n    </div>\n  );\n}\n\nconst ReactWindowRow = React.memo(function (props: any) {\n  const { columnIndex, rowIndex, style } = props;\n  return (\n    <div className=\"react-recycled-row\" style={style}>\n      <Grid key={rowIndex * 3 + columnIndex} xs={4}>\n        Item {rowIndex * 3 + columnIndex}\n      </Grid>\n    </div>\n  );\n});\n\nfunction ResponsiveDemo() {\n  const childRef = React.useRef() as React.RefObject<VariableSizeList>;\n  const [data, setData] = React.useState(initialData);\n  const [test, setTest] = React.useState(false);\n  return (\n    <div className=\"App\">\n      <ResponsiveContainer\n        render={({ width, height }) => {\n          return (\n            <VariableSizeList\n              ref={childRef}\n              height={height}\n              data={data}\n              rowHeight={100}\n              rowHeights={data.map(() => 100)}\n              rowComponent={Row}\n              width={width}\n              // column={width <= 1200 ? 2 : 3}\n              // useScrollingIndicator\n            />\n          );\n        }}\n      />\n    </div>\n  );\n}\n\nfunction FullWindow() {\n  // const childRef = React.useRef() as React.RefObject<FullWindowScroll>;\n  const [data, setData] = React.useState(initialData);\n  const [elementHasMounted, setElementHasMounted] = React.useState(false);\n  const ref = React.useRef<HTMLElement>() as React.RefObject<HTMLDivElement>;\n  const [heights, columns] = generateRamdomRowHeightAndColumn(data.length);\n  React.useEffect(() => {\n    if (ref.current) setElementHasMounted(true);\n    else setElementHasMounted(false);\n  }, [ref]);\n\n  // if the scrollContainer is not window, then use fullist.getBoundingClientRect.top - targetScrollContainer.getBoundingClientRect.top\n  return (\n    <div className=\"App\">\n      <button\n        style={{\n          position: \"fixed\",\n          zIndex: 100,\n          top: 0,\n        }}\n        onClick={() =>\n          setData(\n            Array(data.length + 3)\n              .fill(null)\n              .map((_, index) => index)\n          )\n        }\n      >\n        + Data\n      </button>\n      <button\n        style={{\n          position: \"fixed\",\n          left: 100,\n          zIndex: 100,\n          top: 0,\n        }}\n        onClick={() =>\n          setData(\n            Array(data.length - 3)\n              .fill(null)\n              .map((_, index) => index)\n          )\n        }\n      >\n        - data\n      </button>\n      <div\n        style={{\n          height: 600,\n          width: \"100%\",\n        }}\n      >\n        test\n      </div>\n      <div\n        style={{\n          height: \"50vh\",\n          width: \"100%\",\n          overflowY: \"scroll\",\n        }}\n        ref={ref}\n      >\n        <div\n          style={{\n            height: 1000,\n            width: \"100%\",\n          }}\n        >\n          something\n        </div>\n        <FullWindowResponsiveContainer\n          render={() => {\n            return <div>awdawdawd</div>;\n          }}\n        />\n        {/* <FullWindowVariableList\n          rowHeights={heights}\n          rowColumns={columns}\n          scrollElement={ref.current}\n          data={data}\n          rowHeight={100}\n          // rowHeights={heights}\n          // rowColumns={columns}\n          rowComponent={Row}\n          width={\"100%\"}\n        /> */}\n      </div>\n      <div>dawdnwajkd</div>\n      {/* <FullWindowVariableList\n        rowHeights={heights}\n        rowColumns={columns}\n        data={data}\n        rowHeight={100}\n        // rowHeights={heights}\n        // rowColumns={columns}\n        rowComponent={Row}\n        width={\"100%\"}\n        rootMarginTop={0}\n        rootMarginBottom={0}\n        useScrollingIndicator\n      /> */}\n      <div\n        style={{\n          height: 500,\n          width: \"100%\",\n        }}\n      >\n        dwad\n      </div>\n    </div>\n  );\n}\n\nfunction FullWindowDemo() {\n  const listref = React.useRef() as any;\n  const [data, setData] = React.useState(initialData);\n  const [test, setTest] = React.useState(false);\n\n  const ref = React.useRef<HTMLElement>() as React.RefObject<HTMLDivElement>;\n\n  return (\n    <div className=\"App\">\n      <div>dawdaagfwf</div>\n      <div\n        style={{\n          height: 600,\n          width: \"100%\",\n        }}\n        ref={ref}\n      >\n        <button\n          style={{\n            position: \"fixed\",\n            zIndex: 100,\n          }}\n          onClick={() =>\n            setData(\n              Array(data.length + 3)\n                .fill(null)\n                .map((_, index) => index)\n            )\n          }\n        >\n          + Data\n        </button>\n        <button\n          style={{\n            position: \"fixed\",\n            left: 100,\n            zIndex: 100,\n          }}\n          onClick={() =>\n            setData(\n              Array(data.length - 3)\n                .fill(null)\n                .map((_, index) => index)\n            )\n          }\n        >\n          - data\n        </button>\n        <button\n          style={{\n            position: \"fixed\",\n            left: 300,\n            zIndex: 100,\n          }}\n          onClick={() => listref.current.scrollToRow(10)}\n        >\n          Scroll\n        </button>\n      </div>\n      <FullWindowFixedList\n        ref={listref}\n        data={data}\n        rowHeight={100}\n        // rowHeights={heights}\n        // rowColumns={columns}\n        rowComponent={Row}\n        width={\"100%\"}\n        rootMarginTop={0}\n        rootMarginBottom={0}\n        initalScrollTop={500}\n      />\n      {/* <FullWindowResponsiveContainer\n        render={() => {\n          return <div>awdawdawd</div>;\n        }}\n      /> */}\n      <div\n        style={{\n          height: 300,\n        }}\n      >\n        adawdawd\n      </div>\n    </div>\n  );\n}\n\n// need to make responsive window scroll as well as variable height window scroll\nexport default Root;\n","import {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport \"./root.scss\";\nimport SideNav, { examples } from \"./SideNav\";\n\nexport default function Index() {\n  const me = React.useRef();\n  return (\n    <div className=\"root-content\">\n      <SideNav />\n      <main>\n        <Switch>\n          {examples.map(({ label, route, component }) => {\n            return (\n              <Route path={route}>\n                {component && component}\n              </Route>\n            );\n          })}\n        </Switch>\n      </main>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}